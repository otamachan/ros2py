import glob
import os
import pathlib
import shutil
import subprocess
from distutils.command.build import build as _build
from distutils.command.install_data import install_data as _install_data

from setuptools import Distribution as _Distribtuion
from setuptools import setup
from wheel.bdist_wheel import bdist_wheel as _bdist_wheel


class Distribution(_Distribtuion):
    def __init__(self, *args, **kwargs):
        self.cmake_args = []
        if "cmake_args" in kwargs and "cmake_args" in kwargs:
            self.cmake_args = kwargs["cmake_args"]
            del kwargs["cmake_args"]
        self.python = False
        if "python" in kwargs:
            self.python = kwargs["python"]
            del kwargs["python"]
        super().__init__(*args, **kwargs)


class bdist_wheel(_bdist_wheel):
    def finalize_options(self):
        super().finalize_options()
        self.root_is_pure = False

    def get_tag(self):
        tag = super().get_tag()
        if self.distribution.python:
            return tag
        return self.python_tag, "none", tag[2]


class build(_build):
    def run(self):
        super().run()
        src_dir = pathlib.Path("src")
        temp_dir = pathlib.Path(self.build_temp)
        build_dir = temp_dir / "build"
        install_prefix_dir = temp_dir / "install"
        build_prefix = pathlib.Path(
            os.path.abspath(os.environ["PATH"].split(":")[0] + "/..")
        )
        build_dir.mkdir(parents=True, exist_ok=True)
        install_prefix_dir.mkdir(parents=True, exist_ok=True)
        # ament_index is needed in install directory ...
        (install_prefix_dir / "share").mkdir(exist_ok=True)
        (install_prefix_dir / "share" / "ament_index").symlink_to(
            build_prefix / "share" / "ament_index", target_is_directory=True
        )
        cmake_args = self.distribution.cmake_args
        install_prefix = str(install_prefix_dir.resolve())
        subprocess.check_call(
            [
                "cmake",
                src_dir.resolve(),
                "-DCMAKE_BUILD_TYPE=Release",
                f"-DCMAKE_INSTALL_PREFIX={install_prefix}",
                f"-DCMAKE_PREFIX_PATH={install_prefix}",
                "-DBUILD_TESTING=OFF",
            ]
            + cmake_args,
            cwd=str(build_dir),
        )
        (install_prefix_dir / "share" / "ament_index").unlink()
        subprocess.check_call(
            ["cmake", "--build", build_dir, "--target", "install"],
        )
        if self.distribution.data_files is None:
            self.distribution.data_files = []
        prefix_len = len(str(install_prefix_dir)) + 1
        for f in glob.glob(str(install_prefix_dir / "**"), recursive=True):
            path = pathlib.Path(f)
            if path.is_file():
                self.distribution.data_files.append(
                    (str(path.parent)[prefix_len:], [f])
                )


class install_data(_install_data):
    def copy_file(self, src, dst):
        shutil.copy2(src, dst + "/", follow_symlinks=False)
        return (dst, 1)


setup(
    name="${package_name}",
    version="${version}",
    distclass=Distribution,
    cmake_args=${cmake_args},
    python=${python},
    install_requires=[${install_requires}],
    cmdclass={"build": build, "install_data": install_data, "bdist_wheel": bdist_wheel},
)
